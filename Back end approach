Certainly! Here are explanations of Java code for some of the key features of a stock market and prediction application:

1. Retrieve Stock Data from API:

```
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class StockAPI {
    private static final String API_KEY = "ir-api-key-here";

    public static List<StockData> getStockData(String symbol, Date startDate, Date endDate) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String startDateStr = dateFormat.format(startDate);
        String endDateStr = dateFormat.format(endDate);

        try {
            String apiUrl = "https://api.marketstack.com/v1/eod?access_key=" + API_KEY +
                            "&symbols=" + symbol + "&date_from=" + startDateStr + "&date_to=" + endDateStr;
            URL url = new URL(apiUrl);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");

            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
            String inputLine;
            StringBuilder response = new StringBuilder();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }

            in.close();

            // Parse the JSON response and return a list of StockData objects
            List<StockData> stockDataList = parseResponse(response.toString());
            return stockDataList;
        } catch (Exception e) {
            System.out.println("Error retrieving stock data: " + e.getMessage());
            return new ArrayList<StockData>();
        }
    }

    private static List<StockData> parseResponse(String response) {
        // Code to parse the JSON response and return a list of StockData objects
        // ...
    }
}
```

In this code, we define a `StockAPI` class that includes a `getStockData` method for retrieving historical stock data for the specified symbol and date range. The method uses the Marketstack API to retrieve the data and returns a list of `StockData` objects representing the retrieved data.

2. Calculate Moving Average:

```
public class MovingAverage {
    public static double calculateMovingAverage(List<StockData> stockDataList, int windowSize) {
        if (stockDataList.size() < windowSize) {
            throw new IllegalArgumentException("Not enough data to calculate moving average");
        }

        double sum = 0.0;
        for (int i = stockDataList.size() - 1; i >= stockDataList.size() - windowSize; i--) {
            sum += stockDataList.get(i).getClose();
        }

        return sum / windowSize;
    }
}
```

In this code, we define a `MovingAverage` class that includes a `calculateMovingAverage` method for calculating the moving average of the stock price using the close price and the specified window size.

3. Predict Future Stock Price:

```
public class StockPrediction {
    public static double predictFuturePrice(List<StockData> stockDataList, int numDays) {
        if (stockDataList.size() < 2) {
            throw new IllegalArgumentException("Not enough data to predict future price");
        }

        // Code to analyze historical data and predict the future stock price
        // ...

        // Return the predicted future stock price
        return predictedPrice;
    }
}
```

In this code, we define a `StockPrediction` class that includes a `predictFuturePrice` method for analyzing historical stock data to predict the future stock price. The method uses various techniques such as linear regression, time series analysis, and machine learning to make the prediction.
